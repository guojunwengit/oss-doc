import{_ as r,o as s,c as t,a as n}from"./app.8ecd04ca.js";const a="/oss-doc/img/position.png",e={},o=n('<h1 id="项目定位" tabindex="-1"><a class="header-anchor" href="#项目定位" aria-hidden="true">#</a> 项目定位</h1><h2 id="_1-本项目实现了什么" tabindex="-1"><a class="header-anchor" href="#_1-本项目实现了什么" aria-hidden="true">#</a> 1. 本项目实现了什么？</h2><h3 id="对象存储的基本要求" tabindex="-1"><a class="header-anchor" href="#对象存储的基本要求" aria-hidden="true">#</a> 对象存储的基本要求</h3><ul><li><p><em>可扩展性</em></p><p>当现有的服务器集群无法满足容量、吞吐量、时延性等性能指标时，我们必须能够轻易的扩展现有的服务器集群，对<strong>接口服务</strong>和<strong>数据服务</strong>进行<strong>解耦</strong>，并且个节点之间<strong>并发执行</strong>，没有全局锁以及某个节点上发生的错误不影响其它节点。</p><p>当HTTP请求增长时，可以加入新的<strong>接口服务器</strong>；当数据存储渐满或者磁盘IO负载过高时，可以加入新的<strong>数据服务器</strong>。</p></li><li><p><em>元数据服务及版本控制</em></p><p>使用<strong>SHA-256</strong>散列函数，产生对象文件的hash值作为对象的唯一标识，并使用<strong>ElasticSearch</strong>来存储对象元数据，有了对象的唯一标识，即可完成对象的版本控制</p></li><li><p><em>数据校验和去重</em></p><p><strong>SIS检查</strong>实现对象去重，让重复数据在系统内只保留一个实体，极好的节省存储空间、提升了存储利用率。通过数据校验，验证客户端提供的hash值和服务端计算的hash值是否一致。</p></li><li><p><em>数据冗余和及时修复</em></p><p>使用<strong>Reed-Solomon</strong>冗余策略，<strong>4个数据片+2个校验片</strong>，简单来说就是将一个完整的对象平均分成6个分片，其中包括4个数据片对象（每个对象的大小是原始对象大小的25%），另外还有两个校验片，例如丢失了一份数据片，可以通过其它三个数据片和两个校验片恢复出丢失的数据片，最后合并出完整的对象。4+2配置中冗余度为2，即<strong>最多可以同时丢失2块数据块，当丢失的数据块个数大于2时，丢失数据块不可恢复</strong>。</p><p><img src="'+a+'" alt="img"></p></li><li><p><em>断点续传</em></p><p>对象存储提供断点续传功能，<strong>允许客户端从某个检查点而不是从头开始上传或下载对象</strong>。</p></li><li><p><em>数据压缩</em></p><p>包括<strong>存储时的数据压缩</strong>、<strong>下载时的数据压缩</strong>，压缩算法采用的是<strong>gzip</strong></p></li><li><p><em>系统维护</em></p><p><strong>版本留存策略</strong>决定了那些版本将要被保留，超过这个阈值的版本将被删除，其中包括两种方式：客户端控制台手动数量限定；服务端定时任务时间限定策略+数量限定策略。</p><p>另外还有<strong>对无元数据引用的对象数据需要进行清除</strong>，以节省存储空间，同样有两种方式可选，客户端手动操作；服务端定时操作。</p><p>最后是<strong>数据的定期、不定期检查和修复</strong>，即使服务端提供了即时修复功能，可能某个对象长期没有得到下载操作而始终得不到修复，最终由于损坏的数据片过多而无法修复，同样提供了客户端手动修复和服务端定时修复。</p></li></ul><h3 id="节点心跳检测及异常报警、硬件信息监控" tabindex="-1"><a class="header-anchor" href="#节点心跳检测及异常报警、硬件信息监控" aria-hidden="true">#</a> 节点心跳检测及异常报警、硬件信息监控</h3><p>使用到服务发现 <strong>Redis</strong>，每个接口服务节点在启动后都会<strong>Subscribe订阅</strong>心跳频道。每个数据服务节点在启动后<strong>每隔 5s</strong> 就会<strong>Publish发布</strong>一条心跳消息到心跳频道，<strong>消息的正文就是该数据服务节点的 HTTP 监听地址</strong>。</p><p>同时<strong>Redis</strong>在项目中还有一处用途，每个数据服务节点启动时会遍历本节点存的对象，并将对象的hash与节点IP存到Redis的Zset数据结构中(缓存预热)。当接口服务需要定位对象时，会通过对象的hash定位到所有存储该对象的数据服务节点。</p><p><strong>硬件监控</strong>使用gopsutil库实现，监控指标为CPU负载、内存使用率、磁盘分区使用率。</p><h3 id="可视化的客户端" tabindex="-1"><a class="header-anchor" href="#可视化的客户端" aria-hidden="true">#</a> 可视化的客户端</h3><p>基于<strong>Vue 2</strong>开发，使用Element UI + Semantic UI + Echarts等UI框架及可视化组件，以及js-base64、js-file-download、crypto-js等三方库，实现了满足<strong>可视化节点心跳检测</strong>、<strong>硬件信息监控</strong>、<strong>桶管理</strong>、<strong>对象管理</strong>、<strong>系统维护</strong>、<strong>日志管理</strong>的专用客户端。</p><h3 id="日志收集及中间件监控" tabindex="-1"><a class="header-anchor" href="#日志收集及中间件监控" aria-hidden="true">#</a> 日志收集及中间件监控</h3><p>Golang自定义日志框架：log包+tail包实时读取+后台协程异步推送+Elasticsearch存储</p><h2 id="_2-本项目没有涉及的范畴" tabindex="-1"><a class="header-anchor" href="#_2-本项目没有涉及的范畴" aria-hidden="true">#</a> 2. 本项目没有涉及的范畴</h2><h3 id="没有涉及用户管理" tabindex="-1"><a class="header-anchor" href="#没有涉及用户管理" aria-hidden="true">#</a> 没有涉及用户管理</h3><p>虽然用户管理是云存储系统的一个基本组成部分，但是这部分和其它系统的用户管理并没有什么区别，一个用户信息数据库和权限认证框架可以满足大多数要求。</p><h3 id="没有提到信息安全方面" tabindex="-1"><a class="header-anchor" href="#没有提到信息安全方面" aria-hidden="true">#</a> 没有提到信息安全方面</h3><p>项目使用的通信协议均为HTTP，事实上一个云存储系统对外一定是使用HTTPS协议，服务端和客户端之间需要建立双向的SSL认证，除此之外，用户的合法身份的授权和验证等功能通常都会有一个专门的身份认证系统来进行管理，而服务端客户端可以通过JWT和身份认证系统打交道。</p><h3 id="没有涉及文件病毒、风险检测" tabindex="-1"><a class="header-anchor" href="#没有涉及文件病毒、风险检测" aria-hidden="true">#</a> 没有涉及文件病毒、风险检测</h3><p>尝试使用过开放Api对文件进行检测，但最终考虑到时效性和文件隐私等方面弃用，建议使用本地离线检测工具。</p><h2 id="_3-项目的定位" tabindex="-1"><a class="header-anchor" href="#_3-项目的定位" aria-hidden="true">#</a> 3. 项目的定位</h2><p>本项目适用于某项目的中间的服务，而并不能作为像阿里云OSS，腾讯云COS的对外提供的对象云存储产品，作为中间服务，可以自行实现用户功能、支付功能、权限控制功能、加密功能等等其它业务场景来使它成为一个完全的对象云存储，或者如果您的项目中仅需要对象存储的功能，可以直接使用它，或对源码进行二次开发。</p>',21),i=[o];function h(g,d){return s(),t("div",null,i)}const c=r(e,[["render",h],["__file","position.html.vue"]]);export{c as default};
